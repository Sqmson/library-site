// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(STUDENT)
  studentId     String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  borrowRecords BorrowRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  isbn        String?  @unique
  description String?  @db.Text
  category    String
  genre       String?
  coverImage  String?
  totalCopies Int      @default(1)
  available   Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  borrowRecords BorrowRecord[]

  @@index([category])
  @@index([title])
  @@index([author])
}

model BorrowRecord {
  id         String           @id @default(cuid())
  userId     String
  bookId     String
  borrowedAt DateTime         @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  status     BorrowingStatus  @default(BORROWED)
  renewCount Int              @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bookId])
  @@index([status])
}

enum Role {
  STUDENT
  ADMIN
}

enum BorrowingStatus {
  BORROWED
  RETURNED
  OVERDUE
}